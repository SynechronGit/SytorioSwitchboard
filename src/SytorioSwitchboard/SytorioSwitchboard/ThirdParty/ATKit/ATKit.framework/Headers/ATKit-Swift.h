// Generated by Apple Swift version 4.1.2 effective-3.3.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ATKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIImage;
@class NSCoder;

SWIFT_CLASS("_TtC5ATKit14ATCarouselView")
@interface ATCarouselView : UIView
@property (nonatomic, copy) NSArray<UIImage *> * _Null_unspecified images;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)pDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)awakeFromNib;
@end

@class UITouch;
@class UIEvent;

/// The ATCheckbox creates a check-box control.
SWIFT_CLASS("_TtC5ATKit10ATCheckbox")
@interface ATCheckbox : UIControl
/// Initializer.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)pDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializer.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overridden method from superclass.
- (void)awakeFromNib;
/// Overridden method from superclass.
- (void)layoutSubviews;
/// Overridden method from superclass.
- (void)drawRect:(CGRect)pRect;
/// The variable allows to get the state of the checkbox as checked or not-checked.
/// <em>Usage Example</em>
/// \code
/// if self.checkBox.isChecked {
///    Swift.print("Checked")
/// } else {
///    Swift.print("Not Checked")
/// }
///
/// \endcodeseealso:
/// <code>func set(isChecked :Bool, animated :Bool)</code>
@property (nonatomic, readonly) BOOL isChecked;
/// The method allows to set the state of the checkbox as checked or not-checked.
/// <em>Usage Example</em>
/// \code
/// self.checkBox.set(isChecked: true, animated: true)
///
/// \endcodeseealso:
/// <code>var isChecked :Bool</code>
- (void)setWithIsChecked:(BOOL)pIsChecked animated:(BOOL)pAnimated;
/// The variable allows to set checked state image of the checkbox. This image will override default look.
/// <em>Usage Example</em>
/// \code
/// self.checkBox.checkedControlStateImage = UIImage(named: "CheckboxChecked")
///
/// \endcodeseealso:
/// <code>var uncheckedControlStateImage :UIImage?</code>
@property (nonatomic, strong) UIImage * _Nullable checkedControlStateImage;
/// The variable allows to set unchecked state image of the checkbox. This image will override default look.
/// <em>Usage Example</em>
/// \code
/// self.checkBox.uncheckedControlStateImage = UIImage(named: "CheckboxUnchecked")
///
/// \endcodeseealso:
/// <code>var checkedControlStateImage :UIImage?</code>
@property (nonatomic, strong) UIImage * _Nullable uncheckedControlStateImage;
/// Overridden method from superclass.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)pTouches withEvent:(UIEvent * _Nullable)pEvent;
@end

@class ATHttpConnectionManagerRequest;
@class ATHttpConnectionManagerResponse;
@class ATHttpConnectionManagerResult;

/// The ATHttpConnectionManager allows to interact with http server with ease.
SWIFT_CLASS("_TtC5ATKit23ATHttpConnectionManager")
@interface ATHttpConnectionManager : NSObject
/// The variable allows to get a singleton instance of the class.
/// <em>Usage Example</em>
/// \code
/// ATHttpConnectionManager.sharedInstance
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ATHttpConnectionManager * _Nonnull sharedInstance;)
+ (ATHttpConnectionManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The function to send http request.
/// <em>Usage Example</em>
/// \code
/// // Code to explain handling response WITHOUT Response-Mapper-Block
/// let aRequest = ATHttpConnectionManagerRequest(urlString: "https://example.com/image.png")
///
/// ATProgressOverlay.sharedInstance.show()
/// ATHttpConnectionManager.sharedInstance.sendRequest(request: aRequest, completion: {(pResult) in
///    ATProgressOverlay.sharedInstance.hide()
///    let anImageData :Data? = (pResult.result as? ATHttpConnectionManagerResponse)?.body
///    if anImageData != nil {
///        let anImage = UIImage(data: anImageData!)
///        self.imageView.image = anImage
///    }
/// })
///
///
/// // Code to explain handling response WITH Response-Mapper-Block
/// let aRequest = ATHttpConnectionManagerRequest(urlString: "https://example.com/data.json")
///
/// ATProgressOverlay.sharedInstance.show()
/// ATHttpConnectionManager.sharedInstance.sendRequest(request: aRequest, responseMapper: {(pResponse) -> ATHttpConnectionManagerResult in
///    let aReturnVal :ATHttpConnectionManagerResult = ATHttpConnectionManagerResult()
///    do {
///        let aJsonObject = try JSONSerialization.jsonObject(with: pResponse.body!, options: JSONSerialization.ReadingOptions.allowFragments)
///        if aJsonObject is NSDictionary {
///            let aResponseDict :NSDictionary = aJsonObject as! NSDictionary
///            aReturnVal.error = nil
///            aReturnVal.result = aResponseDict.value(forKey: "emailAddress") as AnyObject
///        }
///    } catch {
///        aReturnVal.error = NSError(domain: "com.example.error", code: 1, userInfo: [NSLocalizedDescriptionKey : error.localizedDescription])
///        aReturnVal.result = nil
///    }
///    return aReturnVal
/// }, completion: {(pResult) in
///    ATProgressOverlay.sharedInstance.hide()
///    if pResult.result is String {
///        let anEmailAddress = pResult.result as! String
///        self.textView.text = anEmailAddress
///    }
/// })
///
/// \endcode\param pRequest Parameter to provide HTTP request details to execute.
///
/// \param pResponseMapper Parameter to provide response mapper block. The block will get 1) HTTP Response Code, 2) HTTP Response Headers and 3) HTTP Response Body as parameters. You can perform different tasks in this block, like converting the response body to JSON object or XML object and then convert it to model objects etc.
///
/// \param pCompletion Parameter to provide completion block. If response mapper block is nil, then completion block will have ATHttpConnectionManagerResult object with result set to HTTP response body.
///
- (void)sendRequestWithRequest:(ATHttpConnectionManagerRequest * _Nonnull)pRequest responseMapper:(ATHttpConnectionManagerResult * _Nonnull (^ _Nullable)(ATHttpConnectionManagerResponse * _Nonnull))pResponseMapper completion:(void (^ _Nonnull)(ATHttpConnectionManagerResult * _Nonnull))pCompletion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The ATHttpConnectionManagerAttachment allows to send an attachment to server via ATHttpConnectionManager.
SWIFT_CLASS("_TtC5ATKit33ATHttpConnectionManagerAttachment")
@interface ATHttpConnectionManagerAttachment : NSObject
/// The variable allows to set-get the name of the request parameter.
/// <em>Usage Example</em>
/// \code
/// let anAttachment = ATHttpConnectionManagerAttachment()
/// anAttachment.requestParameterName = "user_avatar"
///
/// \endcode
@property (nonatomic, copy) NSString * _Nullable requestParameterName;
/// The variable allows to set-get the file title of the attachment.
/// <em>Usage Example</em>
/// \code
/// let anAttachment = ATHttpConnectionManagerAttachment()
/// anAttachment.fileTitle = "Avatar"
///
/// \endcode
@property (nonatomic, copy) NSString * _Nullable fileTitle;
/// The variable allows to set-get the file extension of the attachment.
/// <em>Usage Example</em>
/// \code
/// let anAttachment = ATHttpConnectionManagerAttachment()
/// anAttachment.fileExtension = "jpg"
///
/// \endcode
@property (nonatomic, copy) NSString * _Nullable fileExtension;
/// The variable allows to set-get the file data of the attachment.
/// <em>Usage Example</em>
/// \code
/// let anAttachment = ATHttpConnectionManagerAttachment()
/// anAttachment.fileData = UIImageJPEGRepresentation(anAvatarImage, 0.8)!
///
/// \endcode
@property (nonatomic, copy) NSData * _Nullable fileData;
/// The variable allows to enable/disable the base 64 encoding of the file data of the attachment.
/// <em>Usage Example</em>
/// \code
/// let anAttachment = ATHttpConnectionManagerAttachment()
/// anAttachment.shouldEncodeInBase64 = true
///
/// \endcode
@property (nonatomic) BOOL shouldEncodeInBase64;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The method allows to initialize the class.
/// <em>Usage Example</em>
/// \code
/// let anAvatarImage = UIImage() // Assign image as you want
/// let anAttachment = ATHttpConnectionManagerAttachment(requestParameterName: "user_avatar", fileTitle: "Avatar", fileExtension: "jpg", fileData: UIImageJPEGRepresentation(anAvatarImage, 0.8)!, shouldEncodeInBase64: false)
///
/// \endcode\param pRequestParameterName Name of the http request parameter.
///
/// \param pFileTitle Title (name without extension) of the file attached.
///
/// \param pFileExtension Extension of the file attached.
///
/// \param pFileData Data of the file attached.
///
/// \param pShouldEncodeInBase64 Variable to state if the attachment should be encoded with base64 algorithm.
///
- (nonnull instancetype)initWithRequestParameterName:(NSString * _Nonnull)pRequestParameterName fileTitle:(NSString * _Nullable)pFileTitle fileExtension:(NSString * _Nullable)pFileExtension fileData:(NSData * _Nonnull)pFileData shouldEncodeInBase64:(BOOL)pShouldEncodeInBase64 OBJC_DESIGNATED_INITIALIZER;
@end


/// The ATHttpConnectionManagerRequest allows to create a request for ATHttpConnectionManager.
SWIFT_CLASS("_TtC5ATKit30ATHttpConnectionManagerRequest")
@interface ATHttpConnectionManagerRequest : NSObject
/// The variable allows to enable / disable the logs for the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.isLogEnabled = true
///
/// \endcodenote:
/// It is recommended to disable the logs for production release.
@property (nonatomic) BOOL isLogEnabled;
/// The variable allows to set a URL for the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.url = URL(string: "https://example.com/")
///
/// \endcodeseealso:
/// <code>var httpMethod :String?</code> <code>func addHttpHeader(name :String, value :String)</code> <code>func removeHttpHeader(name :String)</code> <code>func addHttpParameter(name :String, value :Data)</code> <code>func removeHttpParameter(name :String)</code> <code>func addHttpAttachment(_ :ATHttpConnectionManagerAttachment)</code> <code>func addHttpAttachment(requestParameterName :String, attachmentData :Data)</code>
@property (nonatomic, copy) NSURL * _Nullable url;
/// The variable allows to set an HTTP method (GET, POST, PUT etc.) for the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.httpMethod = "POST"
///
/// \endcodeseealso:
/// <code>var url :URL?</code> <code>func addHttpHeader(name :String, value :String)</code> <code>func removeHttpHeader(name :String)</code> <code>func addHttpParameter(name :String, value :Data)</code> <code>func removeHttpParameter(name :String)</code> <code>func addHttpAttachment(_ :ATHttpConnectionManagerAttachment)</code> <code>func addHttpAttachment(requestParameterName :String, attachmentData :Data)</code>
@property (nonatomic, copy) NSString * _Nullable httpMethod;
/// The variable allows to get http headers added to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.httpHeaders
///
/// \endcodeseealso:
/// <code>func addHttpHeader(name :String, value :String)</code> <code>func removeHttpHeader(name :String)</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable httpHeaders;
/// The variable allows to set/get http body of the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.httpBody = "{\"request\":\"submit\"}".data(using: String.Encoding.utf8)
///
/// \endcodenote:
/// If ‘var httpBody’ is provided, then ‘var httpParameters’ will be ignored while sending http request body.
/// seealso:
/// <code>var httpParameters :[String:Data]?</code> <code>func addHttpParameter(name :String, value :Data)</code> <code>func removeHttpParameter(name :String)</code>
@property (nonatomic, copy) NSData * _Nullable httpBody;
/// The variable allows to get http parameters added to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.httpParameters
///
/// \endcodenote:
/// If ‘var httpBody’ is provided, then ‘var httpParameters’ will be ignored while sending http request body.
/// seealso:
/// <code>func addHttpParameter(name :String, value :Data)</code> <code>func removeHttpParameter(name :String)</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSData *> * _Nullable httpParameters;
/// The variable allows to get http attachments added to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.httpAttachments
///
/// \endcodeseealso:
/// <code>func addHttpAttachment(_ :ATHttpConnectionManagerAttachment)</code> <code>func addHttpAttachment(requestParameterName :String, attachmentData :Data)</code>
@property (nonatomic, readonly, copy) NSArray<ATHttpConnectionManagerAttachment *> * _Nullable httpAttachments;
/// The variable allows to set end of the part for the multipart request. Mostly it is – or \r\n.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.endOfPartString = "\r\n"
///
/// \endcode
@property (nonatomic, copy) NSString * _Nullable endOfPartString;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Custom initializer.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest(url: URL(string: "http://google.com")!, httpMethod: "POST")
///
/// \endcodeseealso:
/// <code>init(urlString pUrlString :String, httpMethod pHttpMethod :String)</code>
/// \param pUrl URL. URL to which request is to be made.
///
/// \param pHttpMethod String. HTTP method e.g. GET, POST, PUT etc.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)pUrl httpMethod:(NSString * _Nonnull)pHttpMethod OBJC_DESIGNATED_INITIALIZER;
/// Custom initializer.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest(urlString: "http://google.com", httpMethod: "POST")
///
/// \endcodeseealso:
/// <code>init(url pUrl :URL, httpMethod pHttpMethod :String)</code>
/// \param pUrlString String. URL as string to which request is to be made.
///
/// \param pHttpMethod String. HTTP method e.g. GET, POST, PUT etc.
///
- (nonnull instancetype)initWithUrlString:(NSString * _Nonnull)pUrlString httpMethod:(NSString * _Nonnull)pHttpMethod OBJC_DESIGNATED_INITIALIZER;
/// The method allows to add HTTP header to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.addHttpHeader(name: "Content-Type", value: "application/json")
///
/// \endcodeseealso:
/// <code>func removeHttpHeader(name :String)</code>
/// \param pName Name of the http header.
///
/// \param pValue Value of the http header.
///
- (void)addHttpHeaderWithName:(NSString * _Nonnull)pName value:(NSString * _Nonnull)pValue;
/// The method allows to remove HTTP header from the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.removeHttpHeader(name: "Content-Type")
///
/// \endcodeseealso:
/// <code>func addHttpHeader(name :String, value :String)</code>
/// \param pName Name of the http header.
///
- (void)removeHttpHeaderWithName:(NSString * _Nonnull)pName;
/// The method allows to add HTTP parameter to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.addHttpParameter(name: "first_name", value: "Tony".data(using: String.Encoding.utf8)!)
/// aRequest.addHttpParameter(name: "last_name", value: "Stark".data(using: String.Encoding.utf8)!)
///
/// \endcodenote:
/// If ‘var httpBody’ is provided, then ‘var httpParameters’ will be ignored while sending http request body.
/// seealso:
/// <code>func removeHttpParameter(name :String)</code>
/// \param pName Name of the http parameter.
///
/// \param pValue Value of the http parameter.
///
- (void)addHttpParameterWithName:(NSString * _Nonnull)pName value:(NSData * _Nonnull)pValue;
/// The method allows to remove HTTP parameter from the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// aRequest.removeHttpParameter(name: "first_name")
///
/// \endcodeseealso:
/// <code>func addHttpParameter(name :String, value :String)</code>
/// \param pName Name of the http parameter.
///
- (void)removeHttpParameterWithName:(NSString * _Nonnull)pName;
/// The method allows to add HTTP attachment to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// let anAvatarImage = UIImage() // Assign image as you want
/// let anAttachment = ATHttpConnectionManagerAttachment(requestParameterName: "user_avatar", fileTitle: "Avatar", fileExtension: "jpg", fileData: UIImageJPEGRepresentation(anAvatarImage, 0.8)!, shouldEncodeInBase64: false)
/// aRequest.addHttpAttachment(anAttachment)
///
/// \endcodenote:
/// If ‘var httpBody’ is provided, then ‘var httpAttachments’ will be ignored while sending http request body.
/// seealso:
/// <code>func addHttpAttachment(requestParameterName pRequestParameterName :String, attachmentData pAttachmentData :Data)</code> <code>func removeHttpAttachment(requestParameterName pRequestParameterName :String)</code>
/// \param pAttachment Object of ATHttpConnectionManagerAttachment class with attachment details.
///
- (void)addHttpAttachment:(ATHttpConnectionManagerAttachment * _Nonnull)pAttachment;
/// The method allows to add HTTP attachment to the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest()
/// let anAvatarImage = UIImage() // Assign image as you want
/// aRequest.addHttpAttachment(requestParameterName: "user_avatar", attachmentData: UIImageJPEGRepresentation(anAvatarImage, 0.8)!)
///
/// \endcodenote:
/// If ‘var httpBody’ is provided, then ‘var httpAttachments’ will be ignored while sending http request body.
/// seealso:
/// <code>func addHttpAttachment(_ pAttachment :ATHttpConnectionManagerAttachment)</code> <code>func removeHttpAttachment(requestParameterName pRequestParameterName :String)</code>
/// \param pRequestParameterName Http request parameter name.
///
/// \param pAttachmentData Http attachment data.
///
- (void)addHttpAttachmentWithRequestParameterName:(NSString * _Nonnull)pRequestParameterName attachmentData:(NSData * _Nonnull)pAttachmentData;
/// The method allows to remove HTTP attachment from the request.
/// <em>Usage Example</em>
/// \code
/// let aRequest = ATHttpConnectionManagerRequest() // Create request will added attachments
/// aRequest.removeHttpAttachment(requestParameterName: "user_avatar")
///
/// \endcodeseealso:
/// <code>func addHttpParameter(name :String, value :String)</code>
/// \param pRequestParameterName Name of the http parameter for the attachment.
///
- (void)removeHttpAttachmentWithRequestParameterName:(NSString * _Nonnull)pRequestParameterName;
@end


/// The ATHttpConnectionManagerResponse represents the server response received via ATHttpConnectionManager.
SWIFT_CLASS("_TtC5ATKit31ATHttpConnectionManagerResponse")
@interface ATHttpConnectionManagerResponse : NSObject
/// The variable allows to get the headers of the http response.
/// <em>Usage Example</em>
/// \code
/// Swift.print(aResponse.headers)
///
/// \endcode
@property (nonatomic, copy) NSDictionary * _Nullable headers;
/// The variable allows to get the body of the http response.
/// <em>Usage Example</em>
/// \code
/// Swift.print(aResponse.body)
///
/// \endcode
@property (nonatomic, copy) NSData * _Nullable body;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The ATHttpConnectionManagerResult represents the result after mapping the server response received via ATHttpConnectionManager.
SWIFT_CLASS("_TtC5ATKit29ATHttpConnectionManagerResult")
@interface ATHttpConnectionManagerResult : NSObject
/// The variable allows to set-get the result of the request output.
/// <em>Usage Example</em>
/// \code
/// let aUser = User()
/// aUser.emailAddress = "user@example.com"
///
/// let aResult = ATHttpConnectionManagerResult()
/// aResult.result = aUser
///
/// \endcode
@property (nonatomic, strong) id _Nullable result;
/// The variable allows to set-get the error of the request output.
/// <em>Usage Example</em>
/// \code
/// let aResult = ATHttpConnectionManagerResult()
/// aResult.error = NSError(domain: "com.example.error", code: 1, userInfo: [NSLocalizedDescriptionKey : "Unknown error."])
///
/// \endcode
@property (nonatomic) NSError * _Nullable error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The ATKit defines the core of the framework.
SWIFT_CLASS("_TtC5ATKit5ATKit")
@interface ATKit : NSObject
/// The variable allows to get the version of the framework.
/// <em>Usage Example</em>
/// \code
/// ATKit.frameworkVersion
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull frameworkVersion;)
+ (NSString * _Nonnull)frameworkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// The ATProgressOverlay creates an overlay that can be used to indicate any application activity and to disable user interaction with the application for some time.
SWIFT_CLASS("_TtC5ATKit17ATProgressOverlay")
@interface ATProgressOverlay : NSObject
/// The variable allows to get a singleton instance of the class.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ATProgressOverlay * _Nonnull sharedInstance;)
+ (ATProgressOverlay * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The variable allows to have blur background for the progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.shouldBlurBackground = true
///
/// \endcode
@property (nonatomic) BOOL shouldBlurBackground;
/// The variable allows to set background color for the progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.backgroundColor = UIColor(red: 135.0/255.0, green: 206.0/255.0, blue: 250.0/255.0, alpha: 0.5)
///
/// \endcodeprecondition:
/// <code>shouldBlurBackground</code> should be set as false.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The variable allows to set the visual style of the activity indicator on progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.activityIndicatorViewStyle = UIActivityIndicatorViewStyle.whiteLarge
///
/// \endcode
@property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
/// The variable allows to hide / show the activity indicator on progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.isActivityIndicatorHidden = true
///
/// \endcode
@property (nonatomic) BOOL isActivityIndicatorHidden;
/// The variable allows to set the message on progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.message = "Loading your request, please wait until response is received from the server."
///
/// \endcode
@property (nonatomic, copy) NSString * _Nullable message;
/// The variable allows to set the message color on progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.messageColor = UIColor.orange
///
/// \endcode
@property (nonatomic, strong) UIColor * _Nullable messageColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// The function allows to show the progress overlay.
/// <em>Usage Example</em>
/// \code
/// ATProgressOverlay.sharedInstance.show() // Does not show network activity indicator on status bar.
///
/// ATProgressOverlay.sharedInstance.show(isNetworkActivity: true) // Shows network activity indicator on status bar.
///
/// \endcodeseealso:
/// <code>func hide(force :Bool)</code>
/// \param pIsNetworkActivity Parameter to show network activity indicator on status bar.
///
- (void)showWithIsNetworkActivity:(BOOL)pIsNetworkActivity;
/// The function allows to hide the progress overlay.
/// Note that if you call show method twice, then you have to call hide method twice to hide the overlay, otherwise call hide with force parameter as true. In short it goes like, 1) show - hide - show - hide 2) show - show - hide - hide 3) show - show - hide (force :true)
/// <em>Usage Example</em>
/// \code
/// // Scenario 1
/// ATProgressOverlay.sharedInstance.show()
/// ATProgressOverlay.sharedInstance.hide()
/// ATProgressOverlay.sharedInstance.show()
/// ATProgressOverlay.sharedInstance.hide()
///
/// // Scenario 2
/// ATProgressOverlay.sharedInstance.show()
/// ATProgressOverlay.sharedInstance.show()
/// ATProgressOverlay.sharedInstance.hide()
/// ATProgressOverlay.sharedInstance.hide()
///
/// // Scenario 3
/// ATProgressOverlay.sharedInstance.show()
/// ATProgressOverlay.sharedInstance.show()
/// ATProgressOverlay.sharedInstance.hide(force: true)
///
///
/// \endcodeseealso:
/// <code>func show(isNetworkActivity :Bool)</code>
/// \param pForce Parameter to hide the progress overlay forcefully.
///
- (void)hideWithForce:(BOOL)pForce;
@end

@class NSTextContainer;

/// The ATTextView adds various functionalities to UITextView, e.g. placeholder.
SWIFT_CLASS("_TtC5ATKit10ATTextView")
@interface ATTextView : UITextView
/// The variable allows to set color for placeholder. Set it to nil to use default placeholder color.
/// <em>Usage Example</em>
/// \code
/// self.messageTextView.placeholderColor = UIColor(red: 173.0/255.0, green: 216.0/255.0, blue: 230.0/255.0, alpha: 1.0)
///
/// \endcodeseealso:
/// <code>placeholder</code>
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
/// The variable allows to set placeholder for current textview.
/// <em>Usage Example</em>
/// \code
/// self.messageTextView.placeholder = "Type your message here."
///
/// \endcodeseealso:
/// <code>placeholderColor</code>
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// Initializer.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)pDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializer.
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
/// Overridden method from superclass.
- (void)awakeFromNib;
@end


/// The ATToast creates a self dismissing pop-up that can be used to display message to the user.
SWIFT_CLASS("_TtC5ATKit7ATToast")
@interface ATToast : NSObject
/// The variable allows to get a singleton instance of the class.
/// <em>Usage Example</em>
/// \code
/// ATToast.sharedInstance
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ATToast * _Nonnull sharedInstance;)
+ (ATToast * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The ATWindow adds various functionalities to UIWindow, e.g. dismiss keyboard on tap on screen, adjust text-field frame as per keyboard visible/hidden.
SWIFT_CLASS("_TtC5ATKit8ATWindow")
@interface ATWindow : UIWindow
/// The variable allows to dismiss the keyboard on tapping anywhere outside the editable controls (UITextField, UITextView etc.).
/// <em>Usage Example</em>
/// \code
/// (UIApplication.shared.keyWindow as! ATWindow).shouldDismissKeyboardOnTap = true
///
/// \endcode<ul>
///   <li>
///     You can write above line of code in <code>application:didFinishLaunchingWithOptions:</code>, <code>viewDidLoad</code> or any other suitable method.
///   </li>
///   <li>
///     Make sure application keyWindow is initialized as ATWindow.
///   </li>
/// </ul>
/// seealso:
/// <code>addDismissKeyboardExemptedRestorationId(_ pRestorationId :String)</code> <code>removeDismissKeyboardExemptedRestorationId(_ pRestorationId :String)</code>
@property (nonatomic) BOOL shouldDismissKeyboardOnTap;
/// The variable allows to adjust window pan according to keyboard, i.e. when keyboard comes up, the application page will move up to make editable control (UITextField, UITextView etc.) visible.
/// <em>Usage Example</em>
/// \code
/// (UIApplication.shared.keyWindow as! ATWindow).shouldAdjustPanForKeyboard = true
///
/// \endcode<ul>
///   <li>
///     You can write above line of code in <code>application:didFinishLaunchingWithOptions:</code>, <code>viewDidLoad</code> or any other suitable method.
///   </li>
///   <li>
///     Make sure application keyWindow is initialized as ATWindow.
///   </li>
/// </ul>
/// seealso:
/// <code>addAdjustPanExemptedRestorationId(_ pRestorationId :String)</code> <code>removeAdjustPanExemptedRestorationId(_ pRestorationId :String)</code>
@property (nonatomic) BOOL shouldAdjustPanForKeyboard;
/// Initializer.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)pDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializer.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overridden method from superclass.
- (void)awakeFromNib;
/// The function allows to exempt view from dismissing keyboard on tap on it.
/// If you want that the keyboard should <em>not</em> be dismissed on tap on a specific view, then add its restoration ID using this method. You can set restoration ID for any view in nib, storyboard or via code.
/// <em>Usage Example</em>
/// \code
/// (UIApplication.shared.keyWindow as! ATWindow).addDismissKeyboardExemptedRestorationId("firstNameContainerViewResId")
///
/// \endcode<ul>
///   <li>
///     You can write above line of code in <code>application:didFinishLaunchingWithOptions:</code>, <code>viewDidLoad</code> or any other suitable method.
///   </li>
///   <li>
///     Make sure application keyWindow is initialized as ATWindow.
///   </li>
/// </ul>
/// precondition:
/// <code>shouldDismissKeyboardOnTap</code> of ATWindow should be set as true.
/// seealso:
/// <code>removeDismissKeyboardExemptedRestorationId(_ pRestorationId :String)</code> <code>shouldDismissKeyboardOnTap</code>
/// \param pRestorationId Restoration ID of a view that is to be exempted from dismissing the keyboard.
///
- (void)addDismissKeyboardExemptedRestorationId:(NSString * _Nonnull)pRestorationId;
/// The function allows to remove the exempted views from dismissing keyboard on tap on it.
/// If you have added a view to exempt keyboard dismissing, but now you dont want to exempt that view, then you can remove it using this method.
/// <em>Usage Example</em>
/// \code
/// (UIApplication.shared.keyWindow as! ATWindow).removeDismissKeyboardExemptedRestorationId("firstNameContainerViewResId")
///
/// \endcode<ul>
///   <li>
///     You can write above line of code in <code>application:didFinishLaunchingWithOptions:</code>, <code>viewDidLoad</code> or any other suitable method.
///   </li>
///   <li>
///     Make sure application keyWindow is initialized as ATWindow.
///   </li>
/// </ul>
/// precondition:
/// <code>shouldDismissKeyboardOnTap</code> of ATWindow should be set as true.
/// seealso:
/// <code>addDismissKeyboardExemptedRestorationId(_ pRestorationId :String)</code> <code>shouldDismissKeyboardOnTap</code>
/// \param pRestorationId Restoration ID of a view that is to be removed from exemption.
///
- (void)removeDismissKeyboardExemptedRestorationId:(NSString * _Nonnull)pRestorationId;
/// The function allows to exempt editable controls from adjusting pan according to keyboard.
/// If you want that the window pan should <em>not</em> be adjusted according to keyboard for any specific editable control (UITextField, UITextView etc.), then add its restoration ID using this method. You can set restoration ID for any view in nib, storyboard or via code.
/// <em>Usage Example</em>
/// \code
/// (UIApplication.shared.keyWindow as! ATWindow).addAdjustPanExemptedRestorationId("firstNameTextFieldResId")
///
/// \endcode<ul>
///   <li>
///     You can write above line of code in <code>application:didFinishLaunchingWithOptions:</code>, <code>viewDidLoad</code> or any other suitable method.
///   </li>
///   <li>
///     Make sure application keyWindow is initialized as ATWindow.
///   </li>
/// </ul>
/// precondition:
/// <code>shouldAdjustPanForKeyboard</code> of ATWindow should be set as true.
/// seealso:
/// <code>removeAdjustPanExemptedRestorationId(_ pRestorationId :String)</code> <code>shouldAdjustPanForKeyboard</code>
/// \param pRestorationId Restoration ID of an editable control that is to be exempted from pan adjustment according to keyboard.
///
- (void)addAdjustPanExemptedRestorationId:(NSString * _Nonnull)pRestorationId;
/// The function allows to remove the exempted editable controls from adjusting pan according to keyboard.
/// If you have added an editable control to exempt window pan adjustment, but now you dont want to exempt that control, then you can remove it using this method.
/// <em>Usage Example</em>
/// \code
/// (UIApplication.shared.keyWindow as! ATWindow).removeAdjustPanExemptedRestorationId("firstNameTextFieldResId")
///
/// \endcode<ul>
///   <li>
///     You can write above line of code in <code>application:didFinishLaunchingWithOptions:</code>, <code>viewDidLoad</code> or any other suitable method.
///   </li>
///   <li>
///     Make sure application keyWindow is initialized as ATWindow.
///   </li>
/// </ul>
/// precondition:
/// <code>shouldAdjustPanForKeyboard</code> of ATWindow should be set as true.
/// seealso:
/// <code>addAdjustPanExemptedRestorationId(_ pRestorationId :String)</code> <code>shouldAdjustPanForKeyboard</code>
/// \param pRestorationId Restoration ID of an editable control that is to be removed from exemption.
///
- (void)removeAdjustPanExemptedRestorationId:(NSString * _Nonnull)pRestorationId;
@end


@interface NSObject (SWIFT_EXTENSION(ATKit))
/// Variable to get the name of the class of the object.
/// <em>Usage Example</em>
/// \code
/// let anObject = IndexController()
/// Swift.print("Class name:", anObject.className) // Prints "Class name: ATKitDemo.IndexController"
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
@end

@class UIViewController;

@interface UIApplication (SWIFT_EXTENSION(ATKit))
/// The function to get the top-most view controller of the application.
/// <em>Usage Example</em>
/// \code
/// UIApplication.shared.topViewController
///
/// \endcode
@property (nonatomic, readonly, strong) UIViewController * _Nullable topViewController;
@end


@interface UIColor (SWIFT_EXTENSION(ATKit))
/// Initializer for the UIColor with hex code.
/// <em>Usage Example</em>
/// \code
/// let aColor :UIColor = UIColor(hexString: "#FF0000")
///
/// \endcode
- (nonnull instancetype)initWithHexString:(NSString * _Nonnull)pHexString;
@end


@interface UIDevice (SWIFT_EXTENSION(ATKit))
/// Variable to check if current system is device or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isDevice
///
/// \endcodeseealso:
/// <code>var isSimulator :Bool</code>
@property (nonatomic, readonly) BOOL isDevice;
/// Variable to check if current system is simulator or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isSimulator
///
/// \endcodeseealso:
/// <code>var isDevice :Bool</code>
@property (nonatomic, readonly) BOOL isSimulator;
/// Variable to check if current system is iphone or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIphone
///
/// \endcodeseealso:
/// <code>var isIpad :Bool</code>
@property (nonatomic, readonly) BOOL isIphone;
/// Variable to check if current system is iphone 4 or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIphone4
///
/// \endcodeseealso:
/// <code>var isIphone5 :Bool</code> <code>isIphone6 :Bool</code> <code>isIphone6Plus :Bool</code>
@property (nonatomic, readonly) BOOL isIphone4;
/// Variable to check if current system is iphone 5 or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIphone5
///
/// \endcodeseealso:
/// <code>var isIphone4 :Bool</code> <code>isIphone6 :Bool</code> <code>isIphone6Plus :Bool</code>
@property (nonatomic, readonly) BOOL isIphone5;
/// Variable to check if current system is iphone 6 or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIphone6
///
/// \endcodeseealso:
/// <code>var isIphone4 :Bool</code> <code>var isIphone5 :Bool</code> <code>isIphone6Plus :Bool</code>
@property (nonatomic, readonly) BOOL isIphone6;
/// Variable to check if current system is iphone 6 plus or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIphone6Plus
///
/// \endcodeseealso:
/// <code>var isIphone4 :Bool</code> <code>var isIphone5 :Bool</code> <code>isIphone6 :Bool</code>
@property (nonatomic, readonly) BOOL isIphone6Plus;
/// Variable to check if current system is ipad or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIpad
///
/// \endcodeseealso:
/// <code>var isIphone :Bool</code>
@property (nonatomic, readonly) BOOL isIpad;
/// Variable to check if current system is ipad-pro or not.
/// <em>Usage Example</em>
/// \code
/// UIDevice.current.isIpadPro
///
/// \endcode
@property (nonatomic, readonly) BOOL isIpadPro;
@end


@interface UIImage (SWIFT_EXTENSION(ATKit))
/// The function to initialize the UIImage with gif image data.
/// <em>Usage Example</em>
/// \code
/// let anImageData = try? Data(contentsOf: Bundle.main.url(forResource: "Clock", withExtension: "gif")!)
/// let anImage :UIImage? = UIImage.animatedImage(gifData: anImageData!)
///
/// \endcode
+ (UIImage * _Nullable)animatedImageWithGifData:(NSData * _Nonnull)pGifData SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)imageByFixingOrientation SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIView (SWIFT_EXTENSION(ATKit))
/// The function to get current snapshot of the view i.e. to convert view to image.
/// <em>Usage Example</em>
/// \code
/// @IBOutlet weak var profileContainerView :UIView?
///
/// let anImage :UIImage? = self.profileContainerView!.toImage()
///
/// \endcode
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
/// The function to get current first responder within the view (subviews or the view itself).
/// <em>Usage Example</em>
/// \code
/// @IBOutlet weak var profileContainerView :UIView?
///
/// let aView :UIView? = self.profileContainerView!.firstResponder()
///
/// \endcode
- (UIView * _Nullable)firstResponder SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
